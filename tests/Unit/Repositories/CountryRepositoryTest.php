<?php

namespace Tests\Unit\Repositories;

use App\Models\Country;
use App\Repositories\Country\CountryEntity;
use App\Repositories\Country\CountryRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CountryRepositoryTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var CountryRepository
     */
    public $countryRepository;
    /**
     * @var Country
     */
    public $country;
    /**
     * @var CountryEntity
     */
    private $countryEntity;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->countryRepository = new CountryRepository(new Country());

        $this->countryEntity = new CountryEntity([
            'name' => 'Brasil',
            'abbreviation' => 'BR',
        ]);

//        $self = $this;
//        \Psy\Shell::debug(get_defined_vars());
    }

    public function testSuccessCreate()
    {
        $country = $this->countryRepository->create($this->countryEntity);

        $this->assertEquals('Brasil', $country->name);
        $this->assertEquals('BR', $country->abbreviation);
    }

    public function testSuccessUpdate()
    {
        $country = $this->countryRepository->create($this->countryEntity);

        $country->name = 'Argentina';
        $country->abbreviation = 'ARG';

        $countryEntity = new CountryEntity($country->toArray());
        $updateCountry = $this->countryRepository->update($countryEntity);

        $this->assertEquals($updateCountry->id, $country->id);
        $this->assertEquals('Argentina', $updateCountry->name );
        $this->assertEquals('ARG', $updateCountry->abbreviation);
    }

    public function testSuccessDelete()
    {
        $country = $this->countryRepository->create($this->countryEntity);

        $delete = $this->countryRepository->delete($country->id);
        $country->refresh();

        $this->assertTrue($delete);
        $this->assertNotNull($country->deleted_at);
    }

    public function testSuccessFindById()
    {
        $country         = $this->countryRepository->create($this->countryEntity);
        $findCountryById = $this->countryRepository->findById($country->id);

        $this->assertEquals($country->id, $findCountryById->id);
    }

    public function testSuccessFindCountryAll()
    {
        factory(Country::class, 3)->create();
        $findCountryAll = $this->countryRepository->findAll();

//        $self = $this;
//        \Psy\Shell::debug(get_defined_vars());

        $this->assertEquals($findCountryAll->count(), 3);
    }


}
