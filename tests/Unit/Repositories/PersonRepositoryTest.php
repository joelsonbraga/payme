<?php


namespace Tests\Unit\Repositories;


use App\Models\Person;
use App\Repositories\Person\PersonEntity;
use App\Repositories\Person\PersonRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Pagination\LengthAwarePaginator;
use Tests\TestCase;

class PersonRepositoryTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var StateRepository
     */
    public $personRepository;
    /**
     * @var StateEntity
     */
    public $personEntity;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->refreshDatabase();

        $this->personRepository = new PersonRepository(new Person());

        $data = factory(Person::class)->make()->toArray();
        $this->personEntity = new PersonEntity($data);
        $this->personEntity->setUuid(null);

        /*$self = $this;
        \Psy\Shell::debug(get_defined_vars());*/
    }

    public function testSuccessCreate()
    {
        $person = $this->personRepository->create($this->personEntity);

        $this->assertNotNull($person->uuid);
        $this->assertEquals($this->personEntity->getName(), $person->name);
    }

    public function testSuccessUpdate()
    {
        $person = $this->personRepository->create($this->personEntity);
        $this->personEntity->setUuid($person->uuid);

        $updatedPerson = $this->personRepository->update($this->personEntity);

        $this->assertEquals($person->id, $updatedPerson->id);
    }

    public function testSuccessDelete()
    {
        $person = $this->personRepository->create($this->personEntity);
        $deletedPerson = $this->personRepository->delete($person->uuid);

        $this->assertTrue($deletedPerson);
    }

    public function testSuccessFindByUuid()
    {
        $person = $this->personRepository->create($this->personEntity);
        $findPerson = $this->personRepository->findByUuid($person->uuid);

        $this->assertEquals($person->id, $findPerson->id);
    }

    public function testSuccessFindById()
    {
        $person = $this->personRepository->create($this->personEntity);
        $findPerson = $this->personRepository->findById($person->id);

        $this->assertEquals($person->id, $findPerson->id);
    }

    public function testSuccessFindByDocument()
    {
        $person = $this->personRepository->create($this->personEntity);
        $findPerson = $this->personRepository->findByDocument($person->document);

        $this->assertEquals($person->id, $findPerson->id);
    }

    public function testSuccessFindAll()
    {
        factory(Person::class, 10)->create();
        $allPersons = $this->personRepository->findAll(new PersonEntity([]));

        $this->assertTrue($allPersons instanceof LengthAwarePaginator);
        $this->assertEquals(10, $allPersons->count());
    }
}
