<?php


namespace Tests\Unit\Repositories;


use App\Models\Country;
use App\Models\State;
use App\Repositories\Country\Exceptions\StateNotFoundException;
use App\Repositories\State\StateRepository;
use App\Repositories\State\StateEntity;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class StateRepositoryTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var StateRepository
     */
    private $stateRepository;

    /**
     * @var \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    private $country;

    /**
     * @var StateEntity
     */
    private $stateEntity;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->refreshDatabase();

        $this->stateRepository = new StateRepository(new State());
        $this->country = factory(Country::class)->create();
        $this->stateEntity = new StateEntity([
            'country_id'   => $this->country->id,
            'name'         => 'Bahia',
            'abbreviation' => 'BA',
        ]);
    }

    public function testSuccessCreate()
    {
        $state = $this->stateRepository->create($this->stateEntity);

//        $self = $this;
//        \Psy\Shell::debug(get_defined_vars());

        $this->assertEquals($this->country->id, $state->country_id);
        $this->assertEquals('Bahia', $state->name);
        $this->assertEquals('BA', $state->abbreviation);
    }

    public function testSuccessUpdate()
    {
        $state = $this->stateRepository->create($this->stateEntity);
        $state->name         = 'Alagoas';
        $state->abbreviation = 'AL';

//        $self = $this;
//        \Psy\Shell::debug(get_defined_vars());

        $stateEntity = new StateEntity($state->toArray());

        $stateUpdate = $this->stateRepository->update($stateEntity);

        $this->assertEquals($stateUpdate->id, $state->id);
        $this->assertEquals($stateUpdate->country_id, $state->country_id);
        $this->assertEquals('Alagoas', $stateUpdate->name);
        $this->assertEquals('AL', $stateUpdate->abbreviation);
    }

    public function testSuccessDelete()
    {
        $state = $this->stateRepository->create($this->stateEntity);
        $delete = $this->stateRepository->delete($state->id);

//        $self = $this;
//        \Psy\Shell::debug(get_defined_vars());

        $this->assertTrue($delete);

        $this->expectException(StateNotFoundException::class);
        $state = $this->stateRepository->findById($state->id);
    }

    public function testSuccessFindAll()
    {
        factory(State::class, 3)->create();
        $states = $this->stateRepository->findAll();

        $this->assertEquals(3, $states->count());

    }

    public function testSuccessFindById()
    {
        $state     = $this->stateRepository->create($this->stateEntity);
        $findState = $this->stateRepository->findById($state->id);

        $this->assertEquals($findState->id, $state->id);
        $this->assertEquals($findState->country_id, $state->country_id);
        $this->assertEquals($findState->name, $state->name);
        $this->assertEquals($findState->abbreviation, $state->abbreviation);
    }
}
